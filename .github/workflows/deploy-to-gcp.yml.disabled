name: 🚀 Deploy ChatterFix CMMS to GCP

on:
  push:
    branches: [ main, main-clean ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'

env:
  GCP_PROJECT_ID: fredfix
  GCP_ZONE: us-east1-b
  INSTANCE_NAME: chatterfix-cmms-production

jobs:
  deploy:
    name: 🔧 Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: ⚙️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: 🧹 Prepare Clean Deployment Script
      run: |
        # Make deployment script executable
        chmod +x clean-deploy-vm.sh
        
        # Verify script contents
        echo "✅ Deployment script ready:"
        head -5 clean-deploy-vm.sh
        
    - name: 🚀 Deploy to GCP Instance
      run: |
        echo "🧹 Step 1: VM Cleanup with startup script..."
        gcloud compute instances add-metadata ${{ env.INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --metadata-from-file startup-script=clean-deploy-vm.sh
          
        echo "🔄 Triggering VM reset and cleanup..."
        gcloud compute instances reset ${{ env.INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }}
          
        echo "⏳ Waiting for VM restart and cleanup..."
        sleep 120  # 2 minutes for restart
        
        echo "🚀 Step 2: Deploy working backend scripts..."
        
        # Deploy working backend on port 8081
        if [ -f deploy-working-backend.sh ]; then
          echo "📤 Copying working backend script..."
          gcloud compute scp deploy-working-backend.sh ${{ env.INSTANCE_NAME }}:/tmp/deploy-working-backend.sh \
            --zone=${{ env.GCP_ZONE }}
          
          echo "🚀 Executing working backend deployment..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="chmod +x /tmp/deploy-working-backend.sh && /tmp/deploy-working-backend.sh"
        fi
        
        # Deploy emergency backend as fallback
        if [ -f deploy-emergency-backend.sh ]; then
          echo "📤 Copying emergency backend script..."
          gcloud compute scp deploy-emergency-backend.sh ${{ env.INSTANCE_NAME }}:/tmp/deploy-emergency-backend.sh \
            --zone=${{ env.GCP_ZONE }}
          
          echo "🚨 Executing emergency backend deployment..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="chmod +x /tmp/deploy-emergency-backend.sh && /tmp/deploy-emergency-backend.sh"
        fi
        
        echo "⏳ Waiting for backend services to start..."
        sleep 60  # 1 minute for backend startup
        
    - name: 🩺 Health Check
      run: |
        echo "🔍 Getting VM external IP..."
        VM_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        
        echo "🌐 VM IP: $VM_IP"
        
        # Health check with retries
        for i in {1..10}; do
          echo "🩺 Health check attempt $i/10..."
          if curl -s -f "http://$VM_IP:8080/health" > /dev/null; then
            echo "✅ Deployment successful!"
            curl -s "http://$VM_IP:8080/health" | jq '.'
            break
          else
            echo "⏳ Service starting... (attempt $i)"
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Deployment failed - health check timeout"
            exit 1
          fi
        done
        
    - name: 📊 Deployment Summary
      run: |
        VM_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
          
        echo "🎉 DEPLOYMENT COMPLETE!"
        echo "====================="
        echo "🌐 URL: http://$VM_IP"
        echo "🔐 Login: admin / admin123"
        echo "📊 Health: http://$VM_IP:8080/health"
        echo "🤖 AI Assistant: Enabled"
        echo "🧹 Status: Clean deployment"
        
        # Optional: Post to Slack/Discord webhook if secrets are configured
        if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🚀 ChatterFix CMMS deployed successfully to http://$VM_IP\"}" \
            ${{ secrets.SLACK_WEBHOOK }} || true
        fi

  notify-on-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
    - name: 🚨 Deployment Failed
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "Check the logs above for details."
        
        # Optional: Post failure notification
        if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🚨 ChatterFix CMMS deployment failed! Check GitHub Actions logs.\"}" \
            ${{ secrets.SLACK_WEBHOOK }} || true
        fi