name: üöÄ Deploy to Google Cloud Run

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: chatterfix-cmms-mars-level
  REGION: us-central1

jobs:
  deploy:
    name: üöÄ Deploy ChatterFix CMMS to GCP
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üõ†Ô∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üê≥ Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: üîß Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create ${{ env.SERVICE_NAME }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="ChatterFix CMMS Mars-Level AI Platform" || true

      - name: üèóÔ∏è Build and push Docker image
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          
          # Build image
          docker build -f Dockerfile.production -t $IMAGE_URI .
          
          # Push to Artifact Registry
          docker push $IMAGE_URI
          
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: üöÄ Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_URI }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=10 \
            --concurrency=100 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=production,PORT=8080,LOG_LEVEL=INFO" \
            --set-secrets="JWT_SECRET_KEY=jwt-secret:latest,XAI_API_KEY=xai-api-key:latest,OPENAI_API_KEY=openai-api-key:latest" \
            --service-account=${{ env.SERVICE_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: üåê Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üéâ Deployment complete!"
          echo "üåê Service URL: $SERVICE_URL"
          echo "üîç Health check: $SERVICE_URL/mars-status"
          
          # Test deployment
          sleep 30
          curl -f "$SERVICE_URL/mars-status" || echo "‚ö†Ô∏è Health check failed, service may still be starting"

      - name: üìã Setup monitoring
        run: |
          # Enable Cloud Monitoring for the service
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --labels="app=chatterfix-cmms,version=mars-level-ai,environment=production"
          
          echo "üìä Monitoring configured for Cloud Run service"