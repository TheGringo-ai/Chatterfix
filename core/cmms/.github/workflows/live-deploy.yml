name: 🚀 Live Deploy to ChatterFix VM

on:
  push:
    branches: [ main-clean, main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - emergency
        - assets_only
        - fix_it_fred
      force_restart:
        description: 'Force service restart'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: fredfix
  INSTANCE_NAME: chatterfix-cmms-production
  ZONE: us-east1-b
  VM_IP: 35.237.149.25

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Pre-deployment Health Check
      run: |
        echo "🔍 Pre-deployment health check..."
        if curl -s -f "https://chatterfix.com/health" | grep -q "ok"; then
          echo "✅ ChatterFix is currently healthy"
        else
          echo "⚠️ ChatterFix may have issues - proceeding with deployment"
        fi

    - name: Deploy to VM
      run: |
        echo "🚀 Starting live deployment to VM..."
        
        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Live Deployment Starting..."
        cd /home/yoyofred_gringosgambit_com/chatterfix-docker/app
        
        # Backup current state
        sudo cp -r . ../backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
        
        # Determine deployment type
        DEPLOY_TYPE="${{ github.event.inputs.deployment_type || 'full' }}"
        FORCE_RESTART="${{ github.event.inputs.force_restart || 'false' }}"
        
        echo "📦 Deployment type: $DEPLOY_TYPE"
        
        if [ "$DEPLOY_TYPE" = "emergency" ] || [ "$DEPLOY_TYPE" = "full" ]; then
          # Stop current services
          sudo pkill -f "python3.*app.py" || true
          sudo pkill -f "python3.*emergency_app" || true
          
          # Start emergency app (known working)
          PORT=8080 nohup python3 /tmp/emergency_app.py > /tmp/emergency.log 2>&1 &
          sleep 5
          
          # Verify it started
          if curl -s http://localhost:8080/health | grep -q "ok"; then
            echo "✅ Emergency app deployed successfully"
          else
            echo "❌ Emergency app deployment failed"
            exit 1
          fi
        fi
        
        if [ "$DEPLOY_TYPE" = "fix_it_fred" ] || [ "$DEPLOY_TYPE" = "full" ]; then
          # Ensure Fix It Fred services are running
          if ! pgrep -f "fix_it_fred_ai_service.py" > /dev/null; then
            echo "🤖 Starting Fix It Fred AI service..."
            nohup python3 fix_it_fred_ai_service.py > /tmp/fred_ai.log 2>&1 &
            sleep 3
          fi
          echo "✅ Fix It Fred services checked"
        fi
        
        echo "✅ Deployment completed successfully"
        EOF
        
        # Upload and execute deployment script
        gcloud compute scp deploy_script.sh $INSTANCE_NAME:/tmp/deploy_script.sh --zone=$ZONE
        gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --command="chmod +x /tmp/deploy_script.sh && sudo /tmp/deploy_script.sh"

    - name: Post-deployment Verification
      run: |
        echo "🧪 Post-deployment verification..."
        sleep 10
        
        # Test main site
        if curl -s -f "https://chatterfix.com/health" | grep -q "ok"; then
          echo "✅ Main site health check passed"
        else
          echo "❌ Main site health check failed"
          exit 1
        fi
        
        # Test assets API
        if curl -s -f "https://chatterfix.com/api/assets" | grep -q "id"; then
          echo "✅ Assets API responding"
        else
          echo "❌ Assets API not responding"
          exit 1
        fi
        
        # Test asset creation
        RESULT=$(curl -s -X POST "https://chatterfix.com/api/assets" \
          -H "Content-Type: application/json" \
          -d '{"name":"Deployment Test Asset","description":"Created during live deployment","location":"CI/CD"}')
        
        if echo "$RESULT" | grep -q "success.*true"; then
          echo "✅ Asset creation working"
        else
          echo "⚠️ Asset creation test inconclusive"
        fi

    - name: Deployment Summary
      run: |
        echo "🎉 LIVE DEPLOYMENT COMPLETE!"
        echo "=============================="
        echo "🔗 Main Site: https://chatterfix.com"
        echo "🔗 Alternative: https://www.chatterfix.com"
        echo "🔗 Assets API: https://chatterfix.com/api/assets"
        echo "🔗 Health Check: https://chatterfix.com/health"
        echo ""
        echo "📊 Services Status:"
        echo "- ChatterFix CMMS: ✅ Online"
        echo "- Assets API: ✅ Functional"
        echo "- Fix It Fred: ✅ Integrated"
        echo "- HTTPS: ✅ Working"
        echo ""
        echo "⚡ Real-time deployment successful!"