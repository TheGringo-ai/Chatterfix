# ChatterFix CMMS Mars-Level AI Platform - Production Docker Compose
# ðŸš€ Enterprise deployment configuration with all services

version: '3.8'

services:
  # Main CMMS Application
  chatterfix-cmms:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: chatterfix/cmms-mars-level:4.0.0
    container_name: chatterfix-cmms-production
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - LOG_LEVEL=INFO
      - DATABASE_PATH=/app/data/cmms_production.db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    volumes:
      - cmms_data:/app/data
      - cmms_logs:/app/logs
      - cmms_media:/app/media
    depends_on:
      - redis
      - ollama
    networks:
      - cmms_network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Quantum Analytics and Caching
  redis:
    image: redis:7-alpine
    container_name: chatterfix-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cmms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama for Local AI (LLAMA3)
  ollama:
    image: ollama/ollama:latest
    container_name: chatterfix-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - cmms_network
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: chatterfix-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - chatterfix-cmms
    networks:
      - cmms_network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: chatterfix-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cmms_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chatterfix-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - cmms_network
    depends_on:
      - prometheus

volumes:
  cmms_data:
    driver: local
  cmms_logs:
    driver: local
  cmms_media:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cmms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16